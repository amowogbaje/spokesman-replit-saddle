openapi: 3.0.0
info:
  title: Saddleback Church API
  description: API for Saddleback Church website
  version: '1.0'
  contact:
    name: Saddleback Church API Team
    email: api@saddleback-church.com
servers:
  - url: https://api.saddleback-church.com/v1
    description: Production server
  - url: https://api.staging.saddleback-church.com/v1
    description: Staging server
security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        created_at:
          type: string
          format: date-time
    
    Location:
      type: object
      properties:
        id:
          type: integer
          format: int64
        slug:
          type: string
        name:
          type: string
        address:
          type: string
        services:
          type: string
        description:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
        latitude:
          type: string
          nullable: true
        longitude:
          type: string
          nullable: true
        region:
          type: string
    
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
        slug:
          type: string
        title:
          type: string
        speaker:
          type: string
        date:
          type: string
        image:
          type: string
        video_url:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
    
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        slug:
          type: string
        title:
          type: string
        date:
          type: string
        time:
          type: string
        location:
          type: string
        description:
          type: string
        image:
          type: string
        registration_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
    
    EventRegistration:
      type: object
      properties:
        id:
          type: integer
          format: int64
        event_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        registered_at:
          type: string
          format: date-time
        attended:
          type: boolean
          default: false
        number_of_guests:
          type: integer
          default: 1
        special_requests:
          type: string
          nullable: true
    
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

paths:
  /locations:
    get:
      summary: List all church locations
      security: []
      parameters:
        - in: query
          name: region
          schema:
            type: string
          description: Filter by region
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of locations to return per page
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Pagination offset
      responses:
        '200':
          description: List of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
    post:
      summary: Create a new location
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slug
                - name
                - address
                - services
                - region
              properties:
                slug:
                  type: string
                name:
                  type: string
                address:
                  type: string
                services:
                  type: string
                description:
                  type: string
                image:
                  type: string
                latitude:
                  type: string
                longitude:
                  type: string
                region:
                  type: string
      responses:
        '201':
          description: Location created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /locations/{id_or_slug}:
    get:
      summary: Get location details
      security: []
      parameters:
        - in: path
          name: id_or_slug
          required: true
          schema:
            type: string
          description: Location ID or slug
      responses:
        '200':
          description: Location details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update location details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id_or_slug
          required: true
          schema:
            type: string
          description: Location ID or slug
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                services:
                  type: string
                description:
                  type: string
                image:
                  type: string
                latitude:
                  type: string
                longitude:
                  type: string
                region:
                  type: string
      responses:
        '200':
          description: Location updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages:
    get:
      summary: List all messages/sermons
      security: []
      parameters:
        - in: query
          name: speaker
          schema:
            type: string
          description: Filter by speaker name
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of messages to return per page
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Pagination offset
        - in: query
          name: sort
          schema:
            type: string
            enum: [date_desc, date_asc]
            default: date_desc
          description: Sort order
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      summary: Create a new message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slug
                - title
                - speaker
                - date
                - image
              properties:
                slug:
                  type: string
                title:
                  type: string
                speaker:
                  type: string
                date:
                  type: string
                image:
                  type: string
                video_url:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /messages/latest:
    get:
      summary: Get the latest message
      security: []
      responses:
        '200':
          description: Latest message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: No messages found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /messages/{id_or_slug}:
    get:
      summary: Get message details
      security: []
      parameters:
        - in: path
          name: id_or_slug
          required: true
          schema:
            type: string
          description: Message ID or slug
      responses:
        '200':
          description: Message details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update message details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id_or_slug
          required: true
          schema:
            type: string
          description: Message ID or slug
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                speaker:
                  type: string
                date:
                  type: string
                image:
                  type: string
                video_url:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Message updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events:
    get:
      summary: List all events
      security: []
      parameters:
        - in: query
          name: date_from
          schema:
            type: string
            format: date
          description: Filter events from this date
        - in: query
          name: date_to
          schema:
            type: string
            format: date
          description: Filter events until this date
        - in: query
          name: location
          schema:
            type: string
          description: Filter by location name or ID
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of events to return per page
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Pagination offset
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Create a new event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slug
                - title
                - date
                - time
                - location
                - description
                - image
              properties:
                slug:
                  type: string
                title:
                  type: string
                date:
                  type: string
                time:
                  type: string
                location:
                  type: string
                description:
                  type: string
                image:
                  type: string
                registration_url:
                  type: string
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /events/{id_or_slug}:
    get:
      summary: Get event details
      security: []
      parameters:
        - in: path
          name: id_or_slug
          required: true
          schema:
            type: string
          description: Event ID or slug
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update event details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id_or_slug
          required: true
          schema:
            type: string
          description: Event ID or slug
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                date:
                  type: string
                time:
                  type: string
                location:
                  type: string
                description:
                  type: string
                image:
                  type: string
                registration_url:
                  type: string
      responses:
        '200':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /event-registrations:
    post:
      summary: Register for an event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - event_id
                - first_name
                - last_name
                - email
              properties:
                event_id:
                  type: integer
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                number_of_guests:
                  type: integer
                  default: 1
                special_requests:
                  type: string
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRegistration'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'